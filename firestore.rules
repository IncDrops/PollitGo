
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default: Deny all reads and writes unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection:
    // - Anyone can read user profiles.
    // - Authenticated users can create their own user document (e.g., on signup).
    // - Authenticated users can update their own user document.
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // allow delete: if false; // Typically, users don't delete their own main profile doc easily.
    }

    // Polls collection:
    // - Anyone can read polls.
    // - Authenticated users can create new polls.
    // - Only the creator of a poll can update or delete it.
    //   (More granular updates like voting/liking might be handled by Cloud Functions
    //    or more complex rules in a real app, but this is a safe start for direct client updates.)
    match /polls/{pollId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.creator.id;
      allow delete: if request.auth != null && request.auth.uid == resource.data.creator.id;

      // Comments subcollection within a poll:
      // - Anyone can read comments.
      // - Authenticated users can create new comments.
      // - Only the author of a comment can update or delete it.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid == resource.data.user.id;
        allow delete: if request.auth != null && request.auth.uid == resource.data.user.id;
      }
    }

    // You would add rules for other collections (e.g., messages, notifications) here
    // as your app grows.
  }
}
